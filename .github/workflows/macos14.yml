name: Build OpenCvSharp for macOS 14 (Arm64, .NET 9.0)

on:
  pull_request:
    types: [synchronize, opened]
  push:
    branches:
      - main

env:
  DEBIAN_FRONTEND: noninteractive
  OPENCV_VERSION: 4.10.0
  # Force an arm64 build if the runner is actually an Apple Silicon machine
  CMAKE_OSX_ARCHITECTURES: arm64

jobs:
  build:
    # macOS 14 runner; be aware GitHub may still give you an Intel-based machine
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install build dependencies
        run: |
          brew update
          brew install wget pkg-config mono-libgdiplus gtk+ ffmpeg@4 glog yasm harfbuzz jpeg libpng libtiff openjpeg metis openblas opencore-amr protobuf tbb webp freetype

      # If you want to cache OpenCV builds, uncomment:
      # - name: Cache OpenCV
      #   id: opencv-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ github.workspace }}/opencv_macos
      #     key: opencv-${{ env.OPENCV_VERSION }}-macos-rev1

      - name: Build OpenCV
        # Uncomment if using cache: if: steps.opencv-cache.outputs.cache-hit != 'true'
        run: |
          pwd
          # Download and unzip OpenCV 4.10.0 + opencv_contrib 4.10.0
          wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -Oopencv-${OPENCV_VERSION}.zip
          unzip opencv-${OPENCV_VERSION}.zip
          wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -Oopencv_contrib-${OPENCV_VERSION}.zip
          unzip opencv_contrib-${OPENCV_VERSION}.zip

          cd opencv-${OPENCV_VERSION}
          mkdir build && cd build

          # Configure OpenCV
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules \
            -DBUILD_SHARED_LIBS=OFF \
            -DENABLE_CXX11=ON \
            -DBUILD_TESTS=OFF \
            -DBUILD_PERF_TESTS=OFF \
            -DBUILD_DOCS=OFF \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_JAVA=OFF \
            -DBUILD_opencv_java_bindings_generator=OFF \
            -DBUILD_opencv_python_bindings_generator=OFF \
            -DBUILD_opencv_python_tests=OFF \
            -DBUILD_opencv_ts=OFF \
            -DBUILD_opencv_js=OFF \
            -DBUILD_opencv_js_bindings_generator=OFF \
            -DBUILD_opencv_apps=OFF \
            -DBUILD_opencv_barcode=OFF \
            -DBUILD_opencv_bioinspired=OFF \
            -DBUILD_opencv_ccalib=OFF \
            -DBUILD_opencv_datasets=OFF \
            -DBUILD_opencv_dnn_objdetect=OFF \
            -DBUILD_opencv_dpm=OFF \
            -DBUILD_opencv_fuzzy=OFF \
            -DBUILD_opencv_gapi=ON \
            -DBUILD_opencv_intensity_transform=OFF \
            -DBUILD_opencv_mcc=OFF \
            -DBUILD_opencv_objc_bindings_generator=OFF \
            -DBUILD_opencv_rapid=OFF \
            -DBUILD_opencv_reg=OFF \
            -DBUILD_opencv_stereo=OFF \
            -DBUILD_opencv_structured_light=OFF \
            -DBUILD_opencv_surface_matching=OFF \
            -DBUILD_opencv_wechat_qrcode=ON \
            -DBUILD_opencv_videostab=OFF \
            -DWITH_GSTREAMER=OFF \
            -DWITH_EIGEN=OFF \
            -DWITH_ADE=OFF \
            -DWITH_OPENEXR=OFF \
            -DOPENCV_ENABLE_NONFREE=ON \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/opencv_macos \
            -DCMAKE_OSX_ARCHITECTURES=${{ env.CMAKE_OSX_ARCHITECTURES }} \
            -DWITH_ORBBEC=OFF \
            ..

          make -j2
          make install

          cd $GITHUB_WORKSPACE
          ls

      - name: Build OpenCvSharpExtern
        run: |
          pwd
          mkdir -p src/build
          cd src/build

          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/opencv_macos \
            -DCMAKE_OSX_ARCHITECTURES=${{ env.CMAKE_OSX_ARCHITECTURES }} \
            ..

          make -j2

          ls
          ls OpenCvSharpExtern

          cp OpenCvSharpExtern/libOpenCvSharpExtern.dylib $GITHUB_WORKSPACE/nuget/

      - name: Check OpenCvSharpExtern
        run: |
          cd $GITHUB_WORKSPACE/nuget/
          otool -L libOpenCvSharpExtern.dylib
          nm libOpenCvSharpExtern.dylib > /dev/null 2>&1 || true

          # Use a here-doc to generate test.c without needing to escape quotes
          cat <<'EOF' > test.c
          #include <stdio.h>
          int core_Mat_sizeof();
          int main(){
              int i = core_Mat_sizeof();
              printf("sizeof(Mat) = %d\n", i);
              return 0;
          }
          EOF
          
          gcc -I./ -L./ test.c -o test -lOpenCvSharpExtern

          # macOS uses DYLD_LIBRARY_PATH to find .dylibs
          export DYLD_LIBRARY_PATH=.
          ./test

      - name: Install .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Create NuGet package
        env:
          BETA: ""
        run: |
          yyyymmdd=$(date '+%Y%m%d')
          echo "Date: $yyyymmdd"

          sed -E -i.bak \
            "s/<version>[0-9]+\.[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{8}(-beta[0-9]*)?<\/version>/<version>${OPENCV_VERSION}.${yyyymmdd}${BETA}<\/version>/" \
            $GITHUB_WORKSPACE/nuget/OpenCvSharp4.runtime.osx.14-arm64.nuspec

          cat $GITHUB_WORKSPACE/nuget/OpenCvSharp4.runtime.osx.14-arm64.nuspec

          dotnet pack \
            $GITHUB_WORKSPACE/nuget/OpenCvSharp4.runtime.osx.14-arm64.csproj \
            -o $GITHUB_WORKSPACE/artifacts_macos

          ls $GITHUB_WORKSPACE/artifacts_macos

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts_macos_14_arm64
          path: artifacts_macos

      - name: Test
        run: |
          cd $GITHUB_WORKSPACE/test/OpenCvSharp.Tests
          dotnet build -c Release -f net9.0

          # Copy native library into test output
          cp $GITHUB_WORKSPACE/nuget/libOpenCvSharpExtern.dylib bin/Release/net9.0/

          # Use DYLD_LIBRARY_PATH so the test runner can find libOpenCvSharpExtern.dylib
          export DYLD_LIBRARY_PATH=bin/Release/net9.0

          dotnet test OpenCvSharp.Tests.csproj \
            -c Release \
            -f net9.0 \
            --runtime osx-arm64 \
            --logger "trx;LogFileName=test-results.trx" < /dev/null

          ls
          ls TestResults

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts_macos_14_test_results
          path: test/OpenCvSharp.Tests/TestResults/test-results.trx
